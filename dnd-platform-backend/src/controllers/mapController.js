const prisma = require('../utils/prisma')

// üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞–ø–∏ (—Ç—ñ–ª—å–∫–∏ DM)
const uploadMap = async (req, res) => {
  try {
    const { campaignId, imageUrl, width, height, name } = req.body
    const { userId } = req.user

    if (!campaignId || !imageUrl || !width || !height) {
      return res.status(400).json({ error: '–£—Å—ñ –ø–æ–ª—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ' })
    }

    const campaign = await prisma.campaign.findUnique({
      where: { id: campaignId },
      include: { players: true }
    })

    if (!campaign) {
      return res.status(404).json({ error: '–ö–∞–º–ø–∞–Ω—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })
    }

    const isDM = campaign.players.some(p => p.playerId === userId && p.isDM)
    if (!isDM) {
      return res.status(403).json({ error: '–õ–∏—à–µ DM –º–æ–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–∞–ø—É' })
    }

    const map = await prisma.map.create({
      data: {
        campaignId,
        imageUrl: imageUrl.trim(),
        width: Number(width),
        height: Number(height),
        name: name?.trim() || null,
      }
    })

    res.status(201).json(map)
  } catch (error) {
    console.error('‚ùå uploadMap error:', error)
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message })
  }
}

// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –º–∞–ø–∏ –∫–∞–º–ø–∞–Ω—ñ—ó
// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –º–∞–ø–∏ –∫–∞–º–ø–∞–Ω—ñ—ó –∑ –ø–æ–∑–Ω–∞—á–∫–æ—é –∞–∫—Ç–∏–≤–Ω–æ—ó
const getMapsByCampaign = async (req, res) => {
  try {
    const { campaignId } = req.query;

    if (!campaignId || typeof campaignId !== 'string') {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—î campaignId' });
    }

    const [maps, campaign] = await Promise.all([
      prisma.map.findMany({
        where: { campaignId },
        orderBy: { createdAt: 'desc' }
      }),
      prisma.campaign.findUnique({
        where: { id: campaignId },
        select: { activeMapId: true }
      })
    ]);

    const result = maps.map(map => ({
      ...map,
      active: map.id === campaign?.activeMapId
    }));

    res.json(result);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞–ø:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message });
  }
};

// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–ø—É –∑–∞ id
const getMap = async (req, res) => {
  try {
    const { id } = req.params

    const map = await prisma.map.findUnique({ where: { id } })
    if (!map) return res.status(404).json({ error: '–ú–∞–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })

    res.json(map)
  } catch (error) {
    console.error('getMap error:', error)
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message })
  }
}

// üîπ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—É–º–∞–Ω—É –≤—ñ–π–Ω–∏ (—Ç—ñ–ª—å–∫–∏ DM)
const revealFog = async (req, res) => {
  try {
    const { mapId, fogData } = req.body
    const { userId } = req.user

    const map = await prisma.map.findUnique({
      where: { id: mapId },
      include: { campaign: { include: { players: true } } }
    })

    if (!map) return res.status(404).json({ error: '–ú–∞–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })

    const isDM = map.campaign.players.some(p => p.playerId === userId && p.isDM)
    if (!isDM) {
      return res.status(403).json({ error: '–¢—ñ–ª—å–∫–∏ DM –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ç—É–º–∞–Ω' })
    }

    const updatedMap = await prisma.map.update({
      where: { id: map.id },
      data: { fog: fogData }
    })

    res.json(updatedMap)
  } catch (error) {
    console.error('revealFog error:', error)
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message })
  }
}

// üîπ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –º–∞–ø—É
const activateMap = async (req, res) => {
  try {
    const { id } = req.params
    const { userId } = req.user

    const map = await prisma.map.findUnique({
      where: { id },
      include: { campaign: { include: { players: true } } }
    })

    if (!map) return res.status(404).json({ error: '–ú–∞–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })

    const isDM = map.campaign.players.some(p => p.playerId === userId && p.isDM)
    if (!isDM) return res.status(403).json({ error: '–õ–∏—à–µ DM –º–æ–∂–µ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –º–∞–ø—É' })

    await prisma.campaign.update({
      where: { id: map.campaignId },
      data: { activeMapId: map.id }
    })

    res.json({ message: '–ú–∞–ø—É –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ', mapId: map.id })
  } catch (error) {
    console.error('Map activation error:', error)
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message })
  }
}

const getActiveMapByCampaign = async (req, res) => {
  try {
    const { campaignId } = req.query

    if (!campaignId || typeof campaignId !== 'string') {
      return res.status(400).json({ error: 'campaignId –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π' })
    }

    const campaign = await prisma.campaign.findUnique({
      where: { id: campaignId },
      select: { activeMapId: true }
    })

    if (!campaign?.activeMapId) {
      return res.status(404).json({ error: '–ê–∫—Ç–∏–≤–Ω–∞ –º–∞–ø–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' })
    }

    const map = await prisma.map.findUnique({
      where: { id: campaign.activeMapId }
    })

    if (!map) return res.status(404).json({ error: '–ú–∞–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })

    res.json(map)
  } catch (err) {
    console.error('getActiveMapByCampaign error:', err)
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + err.message })
  }
}

// üîπ –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –º–∞–ø—É
// üîπ –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –º–∞–ø—É
const deactivateMap = async (req, res) => {
  try {
    const { id } = req.params;
    const { userId } = req.user;

    console.log("‚û°Ô∏è –ó–∞–ø–∏—Ç –Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—é –º–∞–ø–∏:", id);

    const map = await prisma.map.findUnique({
      where: { id },
      include: {
        campaign: {
          include: { players: true },
        },
      },
    });

    if (!map) {
      console.warn("‚ö†Ô∏è –ú–∞–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:", id);
      return res.status(404).json({ error: "–ú–∞–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const isDM = map.campaign.players.some(
      (p) => p.playerId === userId && p.isDM
    );
    if (!isDM) {
      console.warn("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î DM:", userId);
      return res.status(403).json({ error: "–õ–∏—à–µ DM –º–æ–∂–µ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –º–∞–ø—É" });
    }

    console.log("üßæ campaign.activeMapId:", map.campaign.activeMapId);
    console.log("üßæ map.id:", map.id);
    console.log("üßæ req.params.id:", id);

    const activeMapId = map.campaign.activeMapId?.trim();
    const thisMapId = map.id.trim();

    if (activeMapId !== thisMapId) {
      console.warn("‚ö†Ô∏è –¶—è –º–∞–ø–∞ –Ω–µ —î –∞–∫—Ç–∏–≤–Ω–æ—é");
      return res
        .status(400)
        .json({ error: "–¶—è –º–∞–ø–∞ –Ω–µ —î –∞–∫—Ç–∏–≤–Ω–æ—é ‚Äî –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –Ω–µ–º–æ–∂–ª–∏–≤–∞" });
    }

    await prisma.campaign.update({
      where: { id: map.campaignId },
      data: { activeMapId: null },
    });

    console.log("‚úÖ –ú–∞–ø—É –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ:", id);
    res.json({ message: "–ú–∞–ø—É –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ" });
  } catch (error) {
    console.error("üî• Map deactivation error:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + error.message });
  }
};


// üîπ –í–∏–¥–∞–ª–∏—Ç–∏ –º–∞–ø—É (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞)
const deleteMap = async (req, res) => {
  try {
    const { id } = req.params
    const { userId } = req.user

    const map = await prisma.map.findUnique({
      where: { id },
      include: { campaign: { include: { players: true } } }
    })

    if (!map) return res.status(404).json({ error: '–ú–∞–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })

    const isDM = map.campaign.players.some(p => p.playerId === userId && p.isDM)
    if (!isDM) return res.status(403).json({ error: '–õ–∏—à–µ DM –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ –º–∞–ø—É' })

    if (map.campaign.activeMapId === id) {
      return res.status(400).json({ error: '–ú–∞–ø–∞ —î –∞–∫—Ç–∏–≤–Ω–æ—é. –°–ø–æ—á–∞—Ç–∫—É –¥–µ–∞–∫—Ç–∏–≤—É–π—Ç–µ —ó—ó.' })
    }

    await prisma.map.delete({ where: { id } })

    res.json({ message: '–ú–∞–ø—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ' })
  } catch (err) {
    console.error(err)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}

module.exports = {
  uploadMap,
  getMapsByCampaign,
  getMap,
  revealFog,
  activateMap,
  getActiveMapByCampaign,
  deactivateMap,
  deleteMap,
}
