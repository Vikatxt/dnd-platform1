const prisma = require('../utils/prisma')

// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getProfile = async (req, res) => {
  const { userId } = req.user

  try {
    const user = await prisma.appUser.findUnique({
      where: { id: userId },
      select: {
        id: true,
        username: true,
        email: true,
        nickname: true,
        createdAt: true
      }
    })

    res.json(user)
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
  }
}

// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–º–ø–∞–Ω—ñ—ó, —É —è–∫–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–±–æ –≥—Ä–∞–≤—Ü–µ–º, –∞–±–æ –≤–ª–∞—Å–Ω–∏–∫–æ–º
const getUserCampaigns = async (req, res) => {
  const { userId } = req.user

  try {
    const campaigns = await prisma.campaign.findMany({
      where: {
        OR: [
          { ownerId: userId },
          { players: { some: { playerId: userId } } }
        ]
      },
      include: {
        owner: {
          select: {
            id: true,
            username: true,
            nickname: true
          }
        },
        players: true
      }
    })

    res.json(campaigns)
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
  }
}

module.exports = { getProfile, getUserCampaigns }
