const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const prisma = require("../utils/prisma");
const { validateEmail, validatePassword, validatePhone } = require("../utils/validation");

const register = async (req, res) => {
  try {
    const { email, phone, password, username, nickname } = req.body;

    // üîê –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!username) {
      return res.status(400).json({ error: "–õ–æ–≥—ñ–Ω –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π" });
    }

    if (!email) {
      return res.status(400).json({ error: "Email –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π" });
    }

    if (!validateEmail(email)) {
      return res.status(400).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email" });
    }

    if (phone && !validatePhone(phone)) {
      return res.status(400).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É" });
    }

    if (!validatePassword(password)) {
      return res.status(400).json({
        error: "–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤, –≤–∫–ª—é—á–∞—é—á–∏ –±—É–∫–≤–∏ —Ç–∞ —Ü–∏—Ñ—Ä–∏"
      });
    }

    // üîé –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
    const existingUser = await prisma.user.findFirst({
      where: {
        OR: [
          { email },
          phone ? { phone } : undefined,
          { username }
        ].filter(Boolean) // –≤–∏–¥–∞–ª—è—î–º–æ undefined
      }
    });

    if (existingUser) {
      if (existingUser.email === email) {
        return res.status(400).json({ error: "Email –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π" });
      }
      if (phone && existingUser.phone === phone) {
        return res.status(400).json({ error: "–¢–µ–ª–µ—Ñ–æ–Ω –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π" });
      }
      if (existingUser.username === username) {
        return res.status(400).json({ error: "–õ–æ–≥—ñ–Ω –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π" });
      }
    }

    // üîê –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(password, 10);

    // ‚ûï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const user = await prisma.user.create({
      data: {
        email,
        phone: phone || null,
        username,
        nickname: nickname || username,
        password: hashedPassword,
        role: "PLAYER"
      },
    });

    res.status(201).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π", user });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const login = async (req, res) => {
  try {
    const { login, password } = req.body;

    if (!login || !password) {
      return res.status(400).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å" });
    }

    const user = await prisma.user.findFirst({
      where: {
        OR: [
          { email: login },
          { phone: login },
          { username: login }
        ]
      }
    });

    if (!user) {
      return res.status(401).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π" });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å" });
    }

    if (!process.env.JWT_SECRET) {
      console.error("JWT_SECRET –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!");
      return res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å–µ—Ä–≤–µ—Ä–∞" });
    }

    const token = jwt.sign(
      { userId: user.id, role: user.role }, 
      process.env.JWT_SECRET, 
      { expiresIn: "7d" }
    );

    res.cookie("token", token, { 
      httpOnly: true, 
      secure: process.env.NODE_ENV === "production", 
      sameSite: "lax" 
    });

    res.json({ 
      token, 
      user: {
        id: user.id,
        email: user.email,
        phone: user.phone,
        username: user.username,
        nickname: user.nickname,
        role: user.role
      } 
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const getMe = async (req, res) => {
  try {
    const user = await prisma.user.findUnique({
      where: { id: req.user.userId },
      select: { 
        id: true, 
        email: true, 
        phone: true, 
        username: true, 
        nickname: true, 
        role: true 
      },
    });

    if (!user) return res.status(404).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π" });

    res.json(user);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const logout = (req, res) => {
  res.clearCookie("token", { httpOnly: true, secure: process.env.NODE_ENV === "production" });
  res.json({ message: "–í–∏—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ" });
};

const changePassword = async (req, res) => {
  try {
    const { oldPassword, newPassword } = req.body;

    if (!oldPassword || !newPassword) {
      return res.status(400).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ä–∏–π —Ç–∞ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—ñ" });
    }

    if (!validatePassword(newPassword)) {
      return res.status(400).json({
        error: "–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤, –≤–∫–ª—é—á–∞—é—á–∏ –±—É–∫–≤–∏ —Ç–∞ —Ü–∏—Ñ—Ä–∏"
      });
    }

    const user = await prisma.user.findUnique({
      where: { id: req.user.userId }
    });

    if (!user) {
      return res.status(404).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π" });
    }

    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({ error: "–°—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π" });
    }

    const hashed = await bcrypt.hash(newPassword, 10);

    await prisma.user.update({
      where: { id: user.id },
      data: { password: hashed }
    });

    res.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ" });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const updateProfile = async (req, res) => {
  try {
    const { username, nickname, email, phone } = req.body

    if (!username || !email) {
      return res.status(400).json({ error: "–õ–æ–≥—ñ–Ω —ñ Email –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" })
    }

    if (!validateEmail(email)) {
      return res.status(400).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email" })
    }

    if (phone && !validatePhone(phone)) {
      return res.status(400).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É" })
    }

    // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å (–∫—Ä—ñ–º –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
    const existingUser = await prisma.user.findFirst({
      where: {
        OR: [
          { email },
          { phone },
          { username }
        ],
        NOT: { id: req.user.userId }
      }
    })

    if (existingUser) {
      if (existingUser.email === email) {
        return res.status(400).json({ error: "Email –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π" })
      }
      if (phone && existingUser.phone === phone) {
        return res.status(400).json({ error: "–¢–µ–ª–µ—Ñ–æ–Ω –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π" })
      }
      if (existingUser.username === username) {
        return res.status(400).json({ error: "–õ–æ–≥—ñ–Ω –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π" })
      }
    }

    const updatedUser = await prisma.user.update({
      where: { id: req.user.userId },
      data: {
        username,
        nickname,
        email,
        phone,
      },
      select: {
        id: true,
        username: true,
        nickname: true,
        email: true,
        phone: true,
        role: true,
      }
    })

    res.json({ message: "–ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ", user: updatedUser })
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:", error)
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
  }
}



module.exports = { register, login, getMe, logout, changePassword, updateProfile };
