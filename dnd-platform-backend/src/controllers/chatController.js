const prisma = require("../utils/prisma")
const { getIO } = require("../webrtc/signaling")

const sendMessage = async (req, res) => {
  try {
    const { campaignId, content } = req.body
    const userId = req.user?.userId

    // üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
    if (!userId) {
      console.warn('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —É sendMessage')
      return res.status(401).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π' })
    }

    // üßº –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!content || typeof content !== 'string' || content.trim() === '') {
      return res.status(400).json({ error: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º' })
    }

    console.log('üü° –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥:', userId, '‚Üí –∫–∞–º–ø–∞–Ω—ñ—è', campaignId)

    const campaign = await prisma.campaign.findUnique({
      where: { id: campaignId },
    })
    if (!campaign) {
      return res.status(404).json({ error: '–ö–∞–º–ø–∞–Ω—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' })
    }

    const message = await prisma.message.create({
      data: {
        campaignId,
        senderId: userId,
        content: content.trim(),
      },
      include: {
        sender: true,
      },
    })

    console.log('üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î:', message)

    // üßΩ –û—á–∏—Å—Ç–∫–∞ —á—É—Ç–ª–∏–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    const safeMessage = {
      id: message.id,
      content: message.content,
      campaignId: message.campaignId,
      createdAt: message.createdAt,
      sender: {
        id: message.sender.id,
        nickname: message.sender.nickname,
        username: message.sender.username,
        avatar: message.sender.avatar,
      },
    }

    const io = getIO()
    const room = `chat-${campaignId}`
    const socketRoom = io.sockets.adapter.rooms.get(room)
    const clientsCount = socketRoom ? socketRoom.size : 0

    console.log(`üìä –ö–ª—ñ—î–Ω—Ç—ñ–≤ —É –∫—ñ–º–Ω–∞—Ç—ñ ${room}: ${clientsCount}`)

    if (clientsCount === 0) {
      console.warn(`‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —É ${room}`)
    }

    io.to(room).emit('newMessage', safeMessage)
    console.log('üì® Socket.IO: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –∫—ñ–º–Ω–∞—Ç—É', room)

    res.status(201).json(safeMessage)
  } catch (error) {
    console.error(`‚ùå sendMessage error: ${error.message}`)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}

const getMessages = async (req, res) => {
  try {
    const { campaignId } = req.params

    const messages = await prisma.message.findMany({
      where: { campaignId },
      include: { sender: true },
      orderBy: { createdAt: "asc" },
    })

    const cleanedMessages = messages.map((msg) => ({
      id: msg.id,
      content: msg.content,
      campaignId: msg.campaignId,
      createdAt: msg.createdAt,
      sender: {
        id: msg.sender.id,
        nickname: msg.sender.nickname,
        username: msg.sender.username,
        avatar: msg.sender.avatar,
      },
    }))

    console.log(`üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ ${cleanedMessages.length} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–∞–º–ø–∞–Ω—ñ—ó ${campaignId}`)

    res.json(cleanedMessages)
  } catch (error) {
    console.error(`‚ùå getMessages error: ${error.message}`)
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å' })
  }
}

module.exports = { sendMessage, getMessages }
