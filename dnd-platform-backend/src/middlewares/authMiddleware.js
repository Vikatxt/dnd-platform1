const jwt = require("jsonwebtoken");
const prisma = require("../utils/prisma");
const logger = require("../utils/logger");

const authenticate = async (req, res, next) => {
  try {
    const cookieToken = req.cookies?.token;
    const authHeader = req.headers.authorization;
    const bearerToken = authHeader?.startsWith("Bearer ") ? authHeader.split(" ")[1] : null;

    const token = cookieToken || bearerToken;

    if (!token) {
      logger.warn("Unauthorized access attempt - No token provided");
      return res.status(401).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–¥–∞–Ω–æ" });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —Ç–æ–∫–µ–Ω –º—ñ—Å—Ç–∏—Ç—å userId
    if (!decoded?.userId) {
      logger.error("JWT –Ω–µ –º—ñ—Å—Ç–∏—Ç—å userId");
      return res.status(401).json({ error: "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π userId" });
    }

    // üì¶ –î–æ–¥–∞—Ç–∫–æ–≤–æ: –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –∞–ª–µ –∫—Ä–∞—â–µ)
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId },
    });

    if (!user) {
      logger.warn("User not found in DB");
      return res.status(401).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    req.user = {
      userId: user.id,
      email: user.email,
      role: user.role,
    };

    logger.info(`‚úÖ User ${user.id} authenticated`);
    next();
  } catch (error) {
    if (error.name === "TokenExpiredError") {
      logger.warn("Token expired for user");
      return res.status(401).json({ error: "–¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π, –±—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É" });
    }

    logger.error("Invalid token provided:", error.message);
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", error);
    return res.status(403).json({ error: "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω" });
  }
};

module.exports = { authenticate };
