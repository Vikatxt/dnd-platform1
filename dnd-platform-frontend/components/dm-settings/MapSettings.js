import { useEffect, useState } from "react";
import api from "@/lib/api";
import styles from "./MapSettings.module.scss";

export default function MapSettings({ campaignId, onUploaded, onActivated, unifiedButtons }) {
  const [mapUrl, setMapUrl] = useState("");
  const [mapName, setMapName] = useState("");
  const [maps, setMaps] = useState([]);
  const [loading, setLoading] = useState(false);

  const fetchMaps = async () => {
    if (!campaignId) return;
    try {
      const res = await api.get(`/maps?campaignId=${campaignId}`);
      setMaps(res.data);
    } catch (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞–ø:", err);
    }
  };

  const handleUploadMap = async (finalUrl) => {
    if (!mapName.trim()) {
      alert("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–∞–ø–∏ –ø–µ—Ä–µ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º.");
      return;
    }

    setLoading(true);
    try {
      const res = await api.post("/maps", {
        campaignId,
        imageUrl: finalUrl,
        name: mapName.trim(),
        width: 40,
        height: 30,
      });
      onUploaded?.(res.data.id);
      setMapUrl("");
      setMapName("");
      await fetchMaps();
    } catch (err) {
      console.error("‚ùå Upload map error:", err);
      alert("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞–ø–∏: " + (err.response?.data?.error || "–Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"));
    } finally {
      setLoading(false);
    }
  };

  const handleDirectUpload = async () => {
    if (!mapUrl.trim()) {
      alert("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–∞–ø–∏");
      return;
    }

    try {
      // üîß –†–æ–±–∏–º–æ –ø—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç GET –±–µ–∑ CORS-–ø–æ–º–∏–ª–∫–∏
      await fetch(mapUrl.trim(), { method: "GET", mode: "no-cors" });

      // ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É
      await handleUploadMap(mapUrl.trim());
    } catch (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", err);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–µ –¥–∂–µ—Ä–µ–ª–æ.");
    }
  };

  const handleToggleActive = async (map) => {
    setLoading(true);
    try {
      if (map.active) {
        await api.put(`/maps/${map.id}/deactivate`);
      } else {
        await api.put(`/maps/${map.id}/activate`);
        onActivated?.();
      }
      await fetchMaps();
    } catch (err) {
      console.error("‚ùå Toggle active map error:", err);
      alert("–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –º–∞–ø–∏");
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id, isActive) => {
    if (isActive) {
      alert("–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É –º–∞–ø—É. –°–ø–æ—á–∞—Ç–∫—É –¥–µ–∞–∫—Ç–∏–≤—É–π—Ç–µ —ó—ó.");
      return;
    }

    if (!confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –º–∞–ø—É?")) return;

    try {
      await api.delete(`/maps/${id}`);
      await fetchMaps();
    } catch (err) {
      const msg = err.response?.data?.error || "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –º–∞–ø—É";
      alert(msg);
      console.error("‚ùå Delete map error:", err);
    }
  };

  useEffect(() => {
    if (campaignId) fetchMaps();
  }, [campaignId]);

  return (
    <section className={styles.block}>
      <h2 className={styles.blockTitle}>–ö–∞—Ä—Ç–∞</h2>

      <label htmlFor="mapName">–ù–∞–∑–≤–∞ –º–∞–ø–∏</label>
      <input
        id="mapName"
        type="text"
        placeholder="–ù–∞–∑–≤–∞ –º–∞–ø–∏"
        value={mapName}
        onChange={(e) => setMapName(e.target.value)}
        className={styles.input}
        disabled={loading}
      />

      <label htmlFor="mapUrl">–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–∞–ø–∏</label>
      <input
        id="mapUrl"
        type="text"
        placeholder="–í—Å—Ç–∞–≤—Ç–µ URL"
        value={mapUrl}
        onChange={(e) => setMapUrl(e.target.value)}
        className={styles.input}
        disabled={loading}
      />

      <div className={styles.buttons}>
        <button
          onClick={handleDirectUpload}
          className={unifiedButtons ? styles.buttonPrimary : styles.buttonSecondary}
          disabled={loading}
        >
          {loading ? "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..." : "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"}
        </button>
      </div>

      {maps.length > 0 && (
        <div className={styles.mapList}>
          <h3 className={styles.mapListTitle}>–Ü—Å–Ω—É—é—á—ñ –º–∞–ø–∏</h3>
          {maps.map((map) => (
            <div key={map.id} className={styles.mapItem}>
              <span className={styles.mapName}>
                {map.name || "–ë–µ–∑ –Ω–∞–∑–≤–∏"} ({map.width}x{map.height})
              </span>
              <div className={styles.mapActions}>
                <button
                  className={map.active ? styles.buttonSecondary : styles.buttonPrimary}
                  onClick={() => handleToggleActive(map)}
                  disabled={loading}
                >
                  {map.active ? "–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏" : "–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏"}
                </button>
                <button
                  className={styles.buttonSecondary}
                  onClick={() => handleDelete(map.id, map.active)}
                  disabled={loading}
                >
                  –í–∏–¥–∞–ª–∏—Ç–∏
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </section>
  );
}
